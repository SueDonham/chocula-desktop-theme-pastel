@use "sass:math";
@use "sass:color";
@use "colors" as *;

// Drawing mixins
// generic drawing of more complex things

@mixin fontsize($size: 24, $base: 16) {
	// provide font size in rem, with px fallback
	font-size: math.round($size) + pt;
}

// Entries
@mixin entry($t) {
	//
	// Entries drawing function
	//
	@if $t==normal {
		color: $text_color;
		background-color: $entry_bg;
		border: 1px solid $entry_border;
		box-shadow: inset 0 2px 4px color.adjust($entry_bg, $alpha: -0.95);
	}
	@if $t==focus {
		color: $fg_color;
		background-color: $entry_bg;
		border: 1px solid $selected_bg_color;
		box-shadow: inset 0 2px 4px color.adjust($entry_bg, $alpha: -0.95);
	}
	@if $t==insensitive {
		color: $insensitive_fg_color;
		background-color: color.mix($entry_bg, $bg_color, 55%);
		border-color: 1px solid color.mix($entry_border, $bg_color, 55%);
		box-shadow: inset 0 2px 4px color.adjust(color.mix($entry_bg, $bg_color, 55%), $alpha: -0.95);
	}
	@if $t==osd {
		color: $osd_fg_color;
		background-color: $osd_entry_bg;
		border: 1px solid $osd_entry_border;
		box-shadow: inset 0 2px 4px color.adjust(black, $alpha: -0.95);
	}
	@if $t==osd-focus {
		color: $selected_fg_color;
		background-color: $selected_bg_color;
		border: 1px solid $selected_bg_color;
		box-shadow: inset 0 2px 4px color.adjust(black, $alpha: -0.95);
	}
	@if $t==osd-insensitive {
		color: color.adjust($osd_fg_color, $alpha: -0.45);
		background-color: color.adjust($osd_entry_bg, $alpha: -0.15);
		border: 1px solid $osd_entry_border;
		box-shadow: inset 0 2px 4px color.adjust(black, $alpha: -0.95);
	}
}

// Buttons
@mixin button($t) {
	//
	// Button drawing function
	//
	text-shadow: 0 1px transparent;
	border-radius: 2px;

	@if $t==normal {
  //
  // normal button
  //
		color: $fg_color;
		background-color: $button_bg;
		border: 1px solid $button_border;
		box-shadow: inset 0 2px 4px color.adjust($button_bg, $alpha: -0.95);
	}
	@else if $t==focus {
	//
  // focused button
  //
		color: $fg_color;
		background-color: $button_bg;
		border: 1px solid $selected_bg_color;
		box-shadow: inset 0 2px 4px color.adjust($button_bg, $alpha: -0.95);
	}
	@else if $t==hover {
  //
  // hovered button
  //
		color: $fg_color;
		background-color: color.adjust($button_bg, $lightness: 5%);
		border: 1px solid $button_border;
		box-shadow: inset 0 2px 4px color.adjust(color.adjust($button_bg, $lightness: 5%), $alpha: -0.95);
	}
	@else if $t==active {
  //
  // pushed button
  //
		color: $selected_fg_color;
		background-color: $selected_bg_color;
		border: 1px solid $selected_bg_color;
		box-shadow: inset 0 2px 4px $selected_bg_color;
	}
	@else if $t==insensitive {
  //
  // insensitive button
  //
		color: $insensitive_fg_color;
		border: 1px solid color.adjust($button_border, $alpha: -0.45);
		background-color: color.adjust($button_bg, $alpha: -0.45);
		box-shadow: inset 0 2px 4px color.adjust($button_bg, $alpha: -0.95);
	}
}

// OSD buttons
@mixin osd_button($t) {
	//
	// OSD button drawing function
	//
	text-shadow: 0 1px transparent;

	@if $t==normal {
	//
  // normal osd button
  //
		color: $osd_fg_color;
		border: 1px solid $osd_button_border;
		background-color: $osd_button_bg;
	}
	@else if $t==hover {
	//
  // hovered osd button
  //
		color: $osd_fg_color;
		border: 1px solid $osd_button_border;
		background-color: color.adjust(color.adjust($osd_button_bg, $lightness: 7%), $alpha: 0.1);
	}
	@else if $t==active {
	//
  // pressed osd button
  //
		color: $selected_fg_color;
		border: 1px solid $selected_bg_color;
		background-color: $selected_bg_color;
	}
	@else if $t==insensitive {
	//
  // insensitive osd button
  //
		color: $osd_insensitive_fg_color;
		border: 1px solid $osd_button_border;
		background-color: color.adjust($osd_button_bg, $alpha: -0.15);
	}
}